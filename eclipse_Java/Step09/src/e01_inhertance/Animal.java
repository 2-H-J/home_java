package e01_inhertance;
/*
 * 클래스 -> 객체를 표준화 한것 (객체지향)
 * 		  -  붕어빵 틀
 * 
 * 객체 -> 코드에서 표현해야할 대상(사물, 사람, ....)
 * 
 * 인스턴스 -> 클래스를 이용하여 메모리를 할당하여 생성한 결과 (객체)
 * 
 * 클래스의 구성요소 : 변수(필드), 메서드, 생성자(초기화,...)
 * 
 * 접근 제어자 -> public(공유) , private(같은클래스) , default(같은패키지), protected
*/
/*
 * 상속(Inheritance)
 * 부모 클래스가 자식 클래스에게 본인이 가지고 있는
 * 변수(필드)와 메서드를 물려주는 행위
 * 
 * 	- 부모클래스가 자식 클래스에게 가지고 있는 필드 및 메서드를 물려주는 행위
 * 	- 자식 클래스는 부모클래스의 private 멤버에 접근을 할 수 없음.
 * 	- 생성자는 상속의 대상이 아님
 * 	- 자바는 하나의 부모클래스만 가질 수 있음
 * 
 * 
 * 부모 클래스 - 자식 클래스
 * 슈퍼 클래스 - 서브 클래스
 * 상위 클래스 - 하위 클래스
 * 
 * 상속의 장점
 * 	- 코드를 재사용 할 수 있음.
 *  - 부모와 자식 관계를 만들어 줌 --> 자식 클래스가 부모 클래스로 형변환이 가능
 *  
 *  메서드 오버라이딩 Overriding : 부모의 기능을 확장하거나 재정의(재구현) 할 수 있다.
 * 									 # 메서드명 동일, 매개변수도 동일, 접근제어자도 동일하게 사용하며 재정의
 * 
 * 오버로딩(Overloading) : 메서드 중복 정의 방법
 * 							1. 매개변수 개수가 다르거나
 * 							2. 매개변수 개수가 같다면, 매개변수 타입을 서로 다르게하면 됨
*/
public class Animal {
	protected int age; // protected : 자신의 상속을 받는 자식클래스들까지 변수(필드)를 사용 할 수 있게 해주는 접근 제어자
	
	public Animal() { // 생성자는 상속의 대상이 아님
		age = 20;
		System.out.println("Animal 생성자");
	}
	
	protected void eat() {
		System.out.println("동물이 먹이를 먹습니다.");
	}
}
